package env.generator.core

import org.fusesource.scalate._

import java.io.File
import java.nio.file.Files
import java.nio.file.Paths

object EnvGenerator {
  def generate[E <: EnvLike](
      baseDir: File,
      commonDefs: Map[String, Any],
      defs: Seq[EnvDef[E]],
      template: EnvTemplate[E],
      env: E
  ): Unit = {
    val engine = new TemplateEngine

    val data = commonDefs ++ defs
      .find(d => d.env == env)
      .get
      .values + ("generate.from" -> s"this file generated by ${relativePath(
        baseDir
      )}${File.separator}${template.path}")
    val templateFile = new File(baseDir, template.path)
    val output = engine.layout(templateFile.getAbsolutePath, data)
    writeEnv(
      new File(baseDir, template.pathSchema(env)).getAbsolutePath,
      output
    )
  }

  private def relativePath(baseDirectory: File): String = {
    val apath = new File(".").getAbsolutePath.replace("/.", "")
    "." + baseDirectory.getAbsolutePath.replace(apath, "")
  }

  private def writeEnv(path: String, content: String): Unit = {
    val p = Paths.get(path)
    val parent = p.getParent.toFile
    if (!parent.exists()) {
      parent.mkdirs()
    }
    Files.write(p, content.getBytes)
  }
}
