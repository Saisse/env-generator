package env.generator.core

import org.fusesource.scalate._

import java.io.{File, PrintWriter}

object EnvGenerator {
  def generate[E <: EnvLike](
      baseDir: File,
      commonDefs: Map[String, Any],
      defs: Seq[EnvDef[E]],
      template: EnvTemplate[E],
      env: E
  ): Unit = {
    val engine = new TemplateEngine

    val data = commonDefs ++ defs
      .find(d => d.env == env)
      .get
      .values + ("generate.from" -> s"this file generated by ${relativePath(
        baseDir
      )}${File.separator}${template.path}")
    val templateFile = new File(baseDir, template.path)
    val outFile =       new File(baseDir, template.pathSchema(env)).getAbsolutePath

    val context = new TemplateRenderContext(templateFile.getAbsolutePath, engine, outFile)
    context.render(templateFile.getAbsolutePath, data)
    context.flush()
  }

  private def relativePath(baseDirectory: File): String = {
    val path = new File(".").getAbsolutePath.replace("/.", "")
    "." + baseDirectory.getAbsolutePath.replace(path, "")
  }
}

class TemplateRenderContext(uri: String, engine: TemplateEngine, outputPath: String) extends DefaultRenderContext(uri, engine, new PrintWriter(outputPath)) {
  noneString = "none"
}
